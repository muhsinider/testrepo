{
 "cells": [
  {
   "cell_type": "raw",
   "id": "9185c821",
   "metadata": {},
   "source": [
    "#pip3.8 install setuptools\n",
    "#python3.8 -m pip install packaging\n",
    "#python3.8 -m pip install pandas dash\n",
    "#python3.8 DV0101EN-Final_Assign_Part_2_Questions.py"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "1427e6be",
   "metadata": {},
   "outputs": [
    {
     "ename": "SyntaxError",
     "evalue": "invalid syntax (<ipython-input-1-86eecbafe940>, line 1)",
     "output_type": "error",
     "traceback": [
      "\u001b[1;36m  File \u001b[1;32m\"<ipython-input-1-86eecbafe940>\"\u001b[1;36m, line \u001b[1;32m1\u001b[0m\n\u001b[1;33m    pip3.8 install setuptools\u001b[0m\n\u001b[1;37m        ^\u001b[0m\n\u001b[1;31mSyntaxError\u001b[0m\u001b[1;31m:\u001b[0m invalid syntax\n"
     ]
    }
   ],
   "source": [
    "pip3.8 install setuptools\n",
    "python3.8 -m pip install packaging\n",
    "python3.8 -m pip install pandas dash\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "7014b6e6",
   "metadata": {},
   "outputs": [
    {
     "ename": "TypeError",
     "evalue": "The `dcc.Dropdown` component (version 2.13.0) with the ID \"select-year\" received an unexpected keyword argument: `hidden`\nAllowed arguments: className, clearable, disabled, id, loading_state, maxHeight, multi, optionHeight, options, persisted_props, persistence, persistence_type, placeholder, search_value, searchable, style, value",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[1;32m<ipython-input-2-fbaf373594c7>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[0;32m     27\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     28\u001b[0m     \u001b[1;31m# Dropdown for selecting a year (hidden by default, only shown for 'Yearly Statistics')\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m---> 29\u001b[1;33m     dcc.Dropdown(\n\u001b[0m\u001b[0;32m     30\u001b[0m         \u001b[0mid\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;34m'select-year'\u001b[0m\u001b[1;33m,\u001b[0m  \u001b[1;31m# Assign a unique ID\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     31\u001b[0m         \u001b[0moptions\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;33m{\u001b[0m\u001b[1;34m'label'\u001b[0m\u001b[1;33m:\u001b[0m \u001b[0mstr\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0myear\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;34m'value'\u001b[0m\u001b[1;33m:\u001b[0m \u001b[0mstr\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0myear\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m}\u001b[0m \u001b[1;32mfor\u001b[0m \u001b[0myear\u001b[0m \u001b[1;32min\u001b[0m \u001b[0mdata\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;34m'Year'\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0munique\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m~\\Anaconda3\\lib\\site-packages\\dash\\development\\base_component.py\u001b[0m in \u001b[0;36mwrapper\u001b[1;34m(*args, **kwargs)\u001b[0m\n\u001b[0;32m    418\u001b[0m         \u001b[1;32mif\u001b[0m \u001b[1;34m\"self\"\u001b[0m \u001b[1;32min\u001b[0m \u001b[0mkwargs\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;34m\"_explicit_args\"\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    419\u001b[0m             \u001b[0mkwargs\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;34m\"_explicit_args\"\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mremove\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;34m\"self\"\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 420\u001b[1;33m         \u001b[1;32mreturn\u001b[0m \u001b[0mfunc\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m*\u001b[0m\u001b[0margs\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;33m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    421\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    422\u001b[0m     \u001b[1;31m# If Python 3, we can set the function signature to be correct\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m~\\Anaconda3\\lib\\site-packages\\dash\\dcc\\Dropdown.py\u001b[0m in \u001b[0;36m__init__\u001b[1;34m(self, options, value, multi, clearable, searchable, search_value, placeholder, disabled, optionHeight, maxHeight, style, className, id, loading_state, persistence, persisted_props, persistence_type, **kwargs)\u001b[0m\n\u001b[0;32m    199\u001b[0m         \u001b[0margs\u001b[0m \u001b[1;33m=\u001b[0m \u001b[1;33m{\u001b[0m\u001b[0mk\u001b[0m\u001b[1;33m:\u001b[0m \u001b[0m_locals\u001b[0m\u001b[1;33m[\u001b[0m\u001b[0mk\u001b[0m\u001b[1;33m]\u001b[0m \u001b[1;32mfor\u001b[0m \u001b[0mk\u001b[0m \u001b[1;32min\u001b[0m \u001b[0m_explicit_args\u001b[0m\u001b[1;33m}\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    200\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 201\u001b[1;33m         \u001b[0msuper\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mDropdown\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m__init__\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m**\u001b[0m\u001b[0margs\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[1;32m~\\Anaconda3\\lib\\site-packages\\dash\\development\\base_component.py\u001b[0m in \u001b[0;36m__init__\u001b[1;34m(self, **kwargs)\u001b[0m\n\u001b[0;32m    136\u001b[0m                     \u001b[0msorted\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_prop_names\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    137\u001b[0m                 )  # pylint: disable=no-member\n\u001b[1;32m--> 138\u001b[1;33m                 raise TypeError(\n\u001b[0m\u001b[0;32m    139\u001b[0m                     \u001b[1;34mf\"{error_string_prefix} received an unexpected keyword argument: `{k}`\"\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    140\u001b[0m                     \u001b[1;34mf\"\\nAllowed arguments: {allowed_args}\"\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;31mTypeError\u001b[0m: The `dcc.Dropdown` component (version 2.13.0) with the ID \"select-year\" received an unexpected keyword argument: `hidden`\nAllowed arguments: className, clearable, disabled, id, loading_state, maxHeight, multi, optionHeight, options, persisted_props, persistence, persistence_type, placeholder, search_value, searchable, style, value"
     ]
    }
   ],
   "source": [
    "# Import the necessary libraries at the beginning of your script\n",
    "import pandas as pd\n",
    "import plotly.express as px\n",
    "import dash\n",
    "from dash import dcc\n",
    "from dash import html\n",
    "from dash.dependencies import Input, Output\n",
    "\n",
    "# Load the data using pandas\n",
    "data = pd.read_csv('https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMDeveloperSkillsNetwork-DV0101EN-SkillsNetwork/Data%20Files/historical_automobile_sales.csv')\n",
    "\n",
    "# Initialize the Dash app\n",
    "app = dash.Dash(__name__)\n",
    "\n",
    "# Create the layout of the app\n",
    "app.layout = html.Div([\n",
    "    # Dropdown for selecting statistics\n",
    "    dcc.Dropdown(\n",
    "        id='dropdown-statistics',  # Assign a unique ID\n",
    "        options=[\n",
    "            {'label': 'Recession Period Statistics', 'value': 'Recession Period Statistics'},\n",
    "            {'label': 'Yearly Statistics', 'value': 'Yearly Statistics'}\n",
    "        ],\n",
    "        value='Recession Period Statistics',\n",
    "        style={'width': '50%'}\n",
    "    ),\n",
    "    \n",
    "    # Dropdown for selecting a year (hidden by default, only shown for 'Yearly Statistics')\n",
    "    dcc.Dropdown(\n",
    "        id='select-year',  # Assign a unique ID\n",
    "        options=[{'label': str(year), 'value': str(year)} for year in data['Year'].unique()],\n",
    "        multi=False,\n",
    "        style={'width': '50%'},\n",
    "        hidden=True\n",
    "    ),\n",
    "    \n",
    "    # Output container for plots\n",
    "    html.Div(id='output-container', className='chart-grid', style={'display': 'flex'})\n",
    "])\n",
    "\n",
    "# Callback for plotting (Tasks 2.4, 2.5, and 2.6)\n",
    "@app.callback(\n",
    "    Output(component_id='output-container', component_property='children'),\n",
    "    [Input(component_id='dropdown-statistics', component_property='value'), Input(component_id='select-year', component_property='value')])\n",
    "def update_output_container(selected_statistics, input_year):\n",
    "    if selected_statistics == 'Recession Period Statistics':\n",
    "        # Filter the data for recession periods\n",
    "        recession_data = data[data['Recession'] == 1]\n",
    "        \n",
    "        # Plot 1: Automobile sales fluctuate over Recession Period (year-wise) using a line chart\n",
    "        yearly_rec = recession_data.groupby('Year')['Automobile_Sales'].mean().reset_index()\n",
    "        R_chart1 = dcc.Graph(\n",
    "            figure=px.line(\n",
    "                yearly_rec, \n",
    "                x='Year',\n",
    "                y='Automobile_Sales',\n",
    "                title=\"Average Automobile Sales Fluctuation Over Recession Period\"\n",
    "            )\n",
    "        )\n",
    "\n",
    "        # Plot 2: Calculate the average number of vehicles sold by vehicle type and represent it as a bar chart\n",
    "        average_sales = recession_data.groupby('Vehicle_Type')['Automobile_Sales'].mean().reset_index()\n",
    "        R_chart2 = dcc.Graph(\n",
    "            figure=px.bar(\n",
    "                average_sales, \n",
    "                x='Vehicle_Type',\n",
    "                y='Automobile_Sales',\n",
    "                title=\"Average Number of Vehicles Sold by Vehicle Type During Recession\"\n",
    "            )\n",
    "        )\n",
    "\n",
    "        # Plot 3: Pie chart for total expenditure share by vehicle type during recessions\n",
    "        exp_rec = recession_data.groupby('Vehicle_Type')['Expenditure'].sum().reset_index()\n",
    "        R_chart3 = dcc.Graph(\n",
    "            figure=px.pie(\n",
    "                exp_rec,\n",
    "                values='Expenditure',\n",
    "                names='Vehicle_Type',\n",
    "                title=\"Total Expenditure Share by Vehicle Type During Recessions\"\n",
    "            )\n",
    "        )\n",
    "\n",
    "        # Plot 4: Develop a bar chart for the effect of the unemployment rate on vehicle type and sales\n",
    "        unemployment_effect = recession_data.groupby('Vehicle_Type')[['Unemployment_Rate', 'Automobile_Sales']].mean().reset_index()\n",
    "        R_chart4 = dcc.Graph(\n",
    "            figure=px.bar(\n",
    "                unemployment_effect, \n",
    "                x='Vehicle_Type',\n",
    "                y='Automobile_Sales',\n",
    "                color='Unemployment_Rate',\n",
    "                title=\"Effect of Unemployment Rate on Vehicle Type and Sales During Recessions\"\n",
    "            )\n",
    "        )\n",
    "\n",
    "        return [\n",
    "            html.Div(className='chart-item', children=[html.Div(children=R_chart1), html.Div(children=R_chart2)]),\n",
    "            html.Div(className='chart-item', children=[html.Div(children=R_chart3), html.Div(children=R_chart4)])\n",
    "        ]\n",
    "    elif selected_statistics == 'Yearly Statistics' and input_year:\n",
    "        # Filter the data for the selected year\n",
    "        yearly_data = data[data['Year'] == int(input_year)]\n",
    "        \n",
    "        # Plot 1: Yearly Automobile sales using a line chart for the whole period\n",
    "        yas = yearly_data.groupby('Year')['Automobile_Sales'].mean().reset_index()\n",
    "        Y_chart1 = dcc.Graph(\n",
    "            figure=px.line(\n",
    "                yas, \n",
    "                x='Year',\n",
    "                y='Automobile_Sales',\n",
    "                title=f\"Yearly Automobile Sales for the Year {input_year}\"\n",
    "            )\n",
    "        )\n",
    "\n",
    "        # Plot 2: Total Monthly Automobile sales using a line chart\n",
    "        yms = yearly_data.groupby('Month')['Automobile_Sales'].sum().reset_index()\n",
    "        Y_chart2 = dcc.Graph(\n",
    "            figure=px.line(\n",
    "                yms, \n",
    "                x='Month',\n",
    "                y='Automobile_Sales',\n",
    "                title=f\"Total Monthly Automobile Sales for the Year {input_year}\"\n",
    "            )\n",
    "        )\n",
    "\n",
    "        # Plot 3: Bar chart for the average number of vehicles sold during the given year\n",
    "        avr_vdata = yearly_data.groupby('Vehicle_Type')['Automobile_Sales'].mean().reset_index()\n",
    "        Y_chart3 = dcc.Graph(\n",
    "            figure=px.bar(\n",
    "                avr_vdata, \n",
    "                x='Vehicle_Type',\n",
    "                y='Automobile_Sales',\n",
    "                title=f\"Average Vehicles Sold by Vehicle Type in the Year {input_year}\"\n",
    "            )\n",
    "        )\n",
    "\n",
    "        # Plot 4: Total Advertisement Expenditure for each vehicle using a pie chart\n",
    "        exp_data = yearly_data.groupby('Vehicle_Type')['Expenditure'].sum().reset_index()\n",
    "        Y_chart4 = dcc.Graph(\n",
    "            figure=px.pie(\n",
    "                exp_data,\n",
    "                values='Expenditure',\n",
    "                names='Vehicle_Type',\n",
    "                title=f\"Total Advertisement Expenditure by Vehicle Type in the Year {input_year}\"\n",
    "            )\n",
    "        )\n",
    "\n",
    "        return [\n",
    "            html.Div(className='chart-item', children=[html.Div(children=Y_chart1), html.Div(children=Y_chart2)]),\n",
    "            html.Div(className='chart-item', children=[html.Div(children=Y_chart3), html.Div(children=Y_chart4)])\n",
    "        ]\n",
    "    else:\n",
    "        return None\n",
    "\n",
    "# Run the Dash app\n",
    "if __name__ == '__main__':\n",
    "    app.run_server(debug=True)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1400c4da",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7f2faed2",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
